ggplot(BPS_GP_ACRES, aes(x = factor(BPS_GP_NAME,level = vec), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip()
vector <- GP_ACRES_Arr [,1]
vector2 <- as.list(vectorattempt)
vec <- GP_ACRES_Arr$BPS_GP_NAME
# Now graphing in desc. order
#trying something else to have fewer dataframes:
ggplot(BPS_GP_ACRES, aes(x = factor(BPS_GP_NAME,level = vec), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip()
---
title: "Michi To-do"
author: "Laura Slavsky"
date: "4/27/2020"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## 4/27/2020
LMS:
1. Get inspired, look @ greasy drive folder o' free books, ggthemes, rmarkdown themes, etc.
2. Find out why tibbles are in the markdown
3. What do I want to learn in the R Markdown?
RLS:
1. Review MichiExploration.  QAQC
2. Consider different types of charts
3. Ask Kevin about sharing in the future.
4. Keep nagging Jeremy
5/2/2020:
Cayman theme from "prettydoc" package
library(readr)
library(ggplot2)
library(dplyr)
library(scales)
library(DT)
library(knitr)
install.packages("prettydoc")
library(prettydoc)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(readr)
library(ggplot2)
library(dplyr)
library(scales)
library(DT)
library(knitr)
install.packages("prettydoc")
library(prettydoc)
install.packages("prettydoc")
# Chunk 1: knittingOptions
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
# Chunk 2
library(readr)
library(ggplot2)
library(dplyr)
library(scales)
library(DT)
library(knitr)
library(prettydoc)
# Chunk 3
knitr::include_graphics("Trees.jpg")
# Chunk 4
knitr::include_graphics("View.jpg")
# Chunk 5
knitr::include_graphics("McCormickWilderness.jpg")
# Chunk 6: fix up da BpS group data
Michi <- read.csv("michiAllClean.csv")
# Let's make that in descending order
Michi_Arr <- arrange(Michi, desc(ACRES))
BPS_GP_ACRES <- Michi %>% #Creating new dataframe with just BPS_GP_NAME and ACRES
group_by(BPS_GP_NAME) %>%
summarise(ACRES = sum(ACRES))
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
# Chunk 7
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
ggplot(GP_ACRES_CHOP, aes(x = reorder(BPS_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("BPS Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#panel.background = element_blank(), axis.line = element_line(colour = "black"))
# Chunk 8: fix up da EVT group data
EVT_GP_ACRES <- Michi %>% #Creating new dataframe with just EVT_200_GP_NAME and ACRES
group_by(EVT_200_GP_NAME) %>%
summarise(ACRES = sum(ACRES))
#now to arrange in desc order
EVT_GP_Arr <- arrange(EVT_GP_ACRES, desc(ACRES))
# Trim EVT to top 10
EVT_GP_ACRES_CHOP <- EVT_GP_Arr[c(1:10),]
# Chunk 9
ggplot(EVT_GP_ACRES_CHOP, aes(x = reorder(EVT_200_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("EVT Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
# Chunk 10: fix up da BpS name data
# GRAPHING EVT AND BPS NAME INSTEAD OF GROUP NAME
# Let's start with BPS
BPS_NAME <- Michi %>% #Creating new dataframe with just BPS_NAME and ACRES
group_by(BPS_NAME) %>%
summarise(ACRES = sum(ACRES))
# And the descenidng order:
BPS_NAME_Desc <- arrange(BPS_NAME, desc(ACRES))
# Top 11 (10 and 11 look equal so putting at 11 for now)
BPS_NAME_CHOP <- BPS_NAME_Desc[c(1:11),]
# Chunk 11
ggplot(BPS_NAME_CHOP, aes(x = reorder(BPS_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Top 11 BPS Names") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
# Chunk 12: fix up da EVT name data
EVT_200_NAME <- Michi %>% #Creating new dataframe with just EVT_200_NAME and ACRES
group_by(EVT_200_NAME) %>%
summarise(ACRES = sum(ACRES))
# And the descenidng order:
EVT_200_NAME_Desc <- arrange(EVT_200_NAME, desc(ACRES))
# AHH! Too many to see! Let's narrow to 35 and see what we get. Might need to do more than that.
EVT_35 <- EVT_200_NAME_Desc[c(1:35),]
# Let's make it top 12 (?) Seems somewhat arbitrary but at a dropoff point
EVT_NAME_CHOP <- EVT_35[c(1:12),]
# Chunk 13
ggplot(EVT_NAME_CHOP, aes(x = reorder(EVT_200_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Top 12 EVT Names") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
Michi <- read.csv("michiAllClean.csv")
# Let's make that in descending order
Michi_Arr <- arrange(Michi, desc(ACRES))
BPS_GP_ACRES <- Michi %>% #Creating new dataframe with just BPS_GP_NAME and ACRES
group_by(BPS_GP_NAME) %>%
summarise(ACRES = sum(ACRES))
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
Michi <- read.csv("michiAllClean.csv")
# Let's make that in descending order
Michi_Arr <- arrange(Michi, desc(ACRES))
BPS_GP_ACRES <- Michi %>% #Creating new dataframe with just BPS_GP_NAME and ACRES
group_by(BPS_GP_NAME) %>%
summarise(ACRES = sum(ACRES))
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
ggplot(GP_ACRES_CHOP, aes(x = reorder(BPS_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("BPS Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(EVT_GP_ACRES_CHOP, aes(x = reorder(EVT_200_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("EVT Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
View(EVT_200_NAME)
View(EVT_200_NAME_Desc)
View(EVT_GP_Arr)
View(EVT_GP_ACRES_CHOP)
View(EVT_GP_ACRES)
View(EVT_NAME_CHOP)
View(EVT_GP_ACRES_CHOP)
View(EVT_GP_ACRES)
View(EVT_GP_Arr)
EVT_GP_Arr = mutate(EVT_GP_Arr,
Percent = (ACRES / sum(ACRES)) *100)
View(EVT_GP_Arr)
options(scipen = 999)
EVT_GP_Arr = mutate(EVT_GP_Arr,
Percent = (ACRES / sum(ACRES)) *100)
View(EVT_GP_Arr)
View(BPS_GP_ACRES)
View(BPS_NAME)
View(BPS_NAME_Desc)
BPS_NAME_Desc = mutate(BPS_NAME_Desc,
Percent = (ACRES / sum(ACRES)) *100)
View(BPS_NAME_Desc)
library(readr)
library(ggplot2)
library(dplyr)
library(scales)
library(DT)
library(knitr)
library(prettydoc)
library(plotly)
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
hist_grp <-
ggplot(GP_ACRES_CHOP, aes(x = reorder(BPS_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Historical Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_grp)
ggplot(EVT_GP_ACRES_CHOP, aes(x = reorder(EVT_200_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Current Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_grp)
library(readr)
library(ggplot2)
library(dplyr)
library(scales)
library(DT)
library(knitr)
library(prettydoc)
library(plotly)
ggplot(EVT_GP_ACRES_CHOP, aes(x = reorder(EVT_200_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Current Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_grp)
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
hist_grp <-
ggplot(GP_ACRES_CHOP, aes(x = reorder(BPS_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Historical Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_grp)
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
hist_grp <-
ggplot(GP_ACRES_CHOP, aes(x = reorder(BPS_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Historical Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_grp)
library(plotly)
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
hist_grp <-
ggplot(GP_ACRES_CHOP, aes(x = reorder(BPS_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Historical Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_grp)
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
hist_grp <-
ggplot(GP_ACRES_CHOP, aes(x = reorder(BPS_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Historical Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_grp)
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
#hist_grp <-
ggplot(GP_ACRES_CHOP, aes(x = reorder(BPS_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Historical Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_grp)
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
#hist_grp <-
ggplot(GP_ACRES_CHOP, aes(x = reorder(BPS_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Historical Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_grp)
ggplot(EVT_GP_ACRES_CHOP, aes(x = reorder(EVT_200_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Current Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
# Chunk 1: knittingOptions
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
# Chunk 2
library(readr)
library(ggplot2)
library(dplyr)
library(scales)
library(DT)
library(knitr)
library(prettydoc)
library(plotly)
# Chunk 3
knitr::include_graphics("Trees.jpg")
# Chunk 4
knitr::include_graphics("View.jpg")
# Chunk 5
knitr::include_graphics("McCormickWilderness.jpg")
# Chunk 6: fix up da BpS group data
Michi <- read.csv("michiAllClean.csv")
# Let's make that in descending order
Michi_Arr <- arrange(Michi, desc(ACRES))
BPS_GP_ACRES <- Michi %>% #Creating new dataframe with just BPS_GP_NAME and ACRES
group_by(BPS_GP_NAME) %>%
summarise(ACRES = sum(ACRES))
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
# Chunk 7
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
hist_grp <-
ggplot(GP_ACRES_CHOP, aes(x = reorder(BPS_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Historical Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_grp)
# Chunk 8: fix up da EVT group data
EVT_GP_ACRES <- Michi %>% #Creating new dataframe with just EVT_200_GP_NAME and ACRES
group_by(EVT_200_GP_NAME) %>%
summarise(ACRES = sum(ACRES))
#now to arrange in desc order
EVT_GP_Arr <- arrange(EVT_GP_ACRES, desc(ACRES))
# Trim EVT to top 10
EVT_GP_ACRES_CHOP <- EVT_GP_Arr[c(1:10),]
# Chunk 9
ggplot(EVT_GP_ACRES_CHOP, aes(x = reorder(EVT_200_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Current Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
# Chunk 10: fix up da BpS name data
# GRAPHING EVT AND BPS NAME INSTEAD OF GROUP NAME
# Let's start with BPS
BPS_NAME <- Michi %>% #Creating new dataframe with just BPS_NAME and ACRES
group_by(BPS_NAME) %>%
summarise(ACRES = sum(ACRES))
# And the descenidng order:
BPS_NAME_Desc <- arrange(BPS_NAME, desc(ACRES))
# Top 11 (10 and 11 look equal so putting at 11 for now)
BPS_NAME_CHOP <- BPS_NAME_Desc[c(1:11),]
# Chunk 11
ggplot(BPS_NAME_CHOP, aes(x = reorder(BPS_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Historical Ecosystem Names") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_grp)
# Chunk 12: fix up da EVT name data
EVT_200_NAME <- Michi %>% #Creating new dataframe with just EVT_200_NAME and ACRES
group_by(EVT_200_NAME) %>%
summarise(ACRES = sum(ACRES))
# And the descenidng order:
EVT_200_NAME_Desc <- arrange(EVT_200_NAME, desc(ACRES))
# AHH! Too many to see! Let's narrow to 35 and see what we get. Might need to do more than that.
EVT_35 <- EVT_200_NAME_Desc[c(1:35),]
# Let's make it top 12 (?) Seems somewhat arbitrary but at a dropoff point
EVT_NAME_CHOP <- EVT_35[c(1:12),]
# Chunk 13
ggplot(EVT_NAME_CHOP, aes(x = reorder(EVT_200_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Top 12 EVT Names") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_grp)
GP_ACRES_Arr <- arrange(BPS_GP_ACRES, desc(ACRES))
# Now, to only take the top 4 rows (IE not Open H20 or Barren)
GP_ACRES_CHOP <- GP_ACRES_Arr[c(1:4),]
hist_grp <-
ggplot(GP_ACRES_CHOP, aes(x = reorder(BPS_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Historical Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_grp)
ggplot(EVT_GP_ACRES_CHOP, aes(x = reorder(EVT_200_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Current Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(EVT_GP_ACRES_CHOP, aes(x = reorder(EVT_200_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
hist_evt_grp <-
ggtitle("Current Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_evt_grp)
ggplot(EVT_GP_ACRES_CHOP, aes(x = reorder(EVT_200_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
hist_evt_grp <-
ggtitle("Current Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_evt_grp)
View(hist_grp)
View(hist_grp)
View(BPS_NAME_CHOP)
options(scipen = 999)
BPS_NAME_CHOP = mutate(BPS_NAME_CHOP,
ChopPct = ACRES / sum(ACRES)) *100)
BPS_NAME_CHOP = mutate(BPS_NAME_CHOP,
BPS_Pct = (ACRES / sum(ACRES)) *100)
View(BPS_NAME_CHOP)
ggplot(BPS_NAME_CHOP, aes(x = reorder(BPS_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
ggtitle("Historical Ecosystem Names") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(EVT_GP_ACRES_CHOP, aes(x = reorder(EVT_200_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
hist_evt_grp <-
ggtitle("Current Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotly(hist_evt_grp)
ggplot(EVT_GP_ACRES_CHOP, aes(x = reorder(EVT_200_GP_NAME, ACRES), y = ACRES)) +
geom_bar(stat = "identity", fill = "grey") +
coord_flip() +
#hist_evt_grp <-
ggtitle("Current Group Ecosystems of the MH") +
labs(x = "", y = "Acres") +
scale_y_continuous(labels = comma) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
#ggplotly(hist_evt_grp)
